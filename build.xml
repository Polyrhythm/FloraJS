<project name="FloraJS" default="build.dev">

  <loadproperties srcfile="build.properties" />

  <import file="${buildr.dir}"/>

  <loadfile property="license" srcfile="license.txt" />

  <tstamp>
    <format property="build.time"
            pattern="MMMM d, yyyy hh:mm:ss"
            locale="en,US"/>
  </tstamp>

  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${jsdoc.output}"/>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${jsdoc.output}"/>
  </target>

  <target name="build.dev" depends="clean,init,concatenate,copyDev">
  </target>

  <target name="build.touch" depends="clean,init,concatenate,minify,bake,copyRelease">
  </target>

  <target name="build.release" depends="clean,init,validate,validateDemos,concatenate,minify,bake,document,copyRelease">
  </target>

  <taskdef name="jshint" classname="com.philmander.jshint.JsHintAntTask"
    classpath="${lib.dir}/jshint/ant-jshint-0.3.1-deps.jar" />

  <target name="validate">
    <jshint dir="${src.dir}" includes="**/*.js"
      optionsFile="${lib.dir}/jshint/options.properties" globals="exports: true, Modernizr: true, console: true" />
  </target>

  <target name="validateDemos">
    <jshint dir="${demos.dir}/src" includes="**/*.js"
      optionsFile="${lib.dir}/jshint/options.properties" globals="exports: true, Modernizr: true, console: true" />
  </target>

  <target name="CSSLintDemos">
    <csslint>
      <fileset dir="${DemoCSS.dir}" includes="**/*.css" />
    </csslint>
  </target>

  <target name="concatenate">
    <concat destfile="${build.dir}/flora.js" fixlastline="yes" eol="lf">
      <header trimleading="yes">/*
        ${license}
        */
        /* Version: %VERSION% */
        /* Build time: ${build.time} */
        /** @namespace */
        var Flora = {}, exports = Flora;

        (function(exports) {
      </header>
      <filelist dir="${src.dir}" files="requestanimframe.js,config.js,elementlist.js,system.js,utils.js,vector.js,colorpalette.js,colortable.js,borderpalette.js,simplexnoise.js,interface.js,universe.js,world.js,camera.js,element.js,agent.js,walker.js,oscillator.js,particle.js,particlesystem.js,liquid.js,attractor.js,repeller.js,heat.js,cold.js,light.js,oxygen.js,food.js,predator.js,sensor.js,flowfieldmarker.js,flowfield.js,connector.js,point.js,caption.js,inputmenu.js,statsdisplay.js"/>
      <footer trimleading="yes">}(exports));</footer>
    </concat>
  </target>

  <target name="document">
    <delete dir="${jsdoc.output}"/>
    <mkdir dir="${jsdoc.output}"/>
    <apply executable="java" failonerror="true" parallel="true">
      <fileset dir="${src.dir}" includes="**/*.js"/>
      <arg line="-jar"/>
      <arg path="${jsdoc}"/>
      <arg path="${jsdoc.run}"/>
      <arg line="-t=${jsdoc.templates}"/>
      <arg line="-d=${jsdoc.output}"/>
      <srcfile/>
    </apply>
  </target>

  <target name="minify">

    <apply executable="java" failonerror="true">

      <fileset dir="${build.dir}" includes="*.js" excludes="*.raw.min.js"/>
      <mapper type="glob" from="*.js" to="${build.dir}/*.raw.min.js"/>

      <arg line="-jar"/>
      <arg path="${closure}"/>
      <arg line="${closure.options}"/>

      <arg line="--js"/>
      <srcfile/>

      <arg line="--js_output_file"/>
      <targetfile/>

    </apply>

  </target>

  <target name="test">

    <phantomjs driver="${phantomjs.driver}">
      <fileset dir="${tests.dir}" includes="*.html" />
    </phantomjs>

  </target>

  <!-- Bake: the final step -->
  <target name="bake">
    <!-- Adds the license to the raw minified file. -->
    <concat destfile="${build.dir}/flora.min.js" fixlastline="yes" eol="lf">
      <header trimleading="yes">/*
        ${license}
        */
        /* Version: %VERSION% */
        /* Build time: ${build.time} */
      </header>
      <filelist dir="${build.dir}" files="flora.raw.min.js"/>
      <footer trimleading="yes"></footer>
    </concat>
    <!-- Searches for %VERSION% in the build directory and replaces with -->
    <!-- the version number found in build.properties. -->
    <replaceregexp match="%VERSION%" replace="${version}" flags="g" byline="true">
      <fileset dir="${build.dir}" includes="**/*"/>
    </replaceregexp>
  </target>

  <!-- Copy: copy build and css files to examples/demos -->
  <target name="copyDev">
    <!-- copy fat file in same folder with version number -->
    <copy file="${build.dir}/flora.js" tofile="${build.dir}/flora.${version}.js" overwrite="true"/>
    <!-- copy fat build file to demos/js -->
    <copy file="${build.dir}/flora.js" todir="${demos.dir}/js" overwrite="true"/>
    <!-- copy modernizr to demos/js -->
    <copy file="${lib.dir}/modernizr.js" todir="${demos.dir}/js" overwrite="true"/>
    <!-- copy css file to demos/css -->
    <copy file="${css.dir}/flora.css" todir="${demos.dir}/css" overwrite="true"/>
    <!-- copy fat build file to tests/lib -->
    <copy file="${build.dir}/flora.js" todir="${tests.dir}/lib" overwrite="true"/>
    <!-- copy modernizr to tests/lib -->
    <copy file="${lib.dir}/modernizr.js" todir="${tests.dir}/lib" overwrite="true"/>
  </target>

  <!-- Copy: copy build and css files to examples/demos -->
  <target name="copyRelease">
    <!-- copy fat file in same folder with version number -->
    <copy file="${build.dir}/flora.js" tofile="${build.dir}/flora.${version}.js" overwrite="true"/>
    <!-- copy minified file in same folder with version number -->
    <copy file="${build.dir}/flora.min.js" tofile="${build.dir}/flora.${version}.min.js" overwrite="true"/>
    <!-- copy minified file to examples/js -->
    <copy file="${build.dir}/flora.min.js" todir="${examples.dir}/js" overwrite="true"/>
    <!-- copy modernizr to examples/js -->
    <copy file="${lib.dir}/modernizr.js" todir="${examples.dir}/js" overwrite="true"/>
    <!-- copy css file to examples/css -->
    <copy file="${css.dir}/flora.css" todir="${examples.dir}/css" overwrite="true"/>
    <!-- copy fat build file to demos/js -->
    <copy file="${build.dir}/flora.js" todir="${demos.dir}/js" overwrite="true"/>
    <!-- copy modernizr to demos/js -->
    <copy file="${lib.dir}/modernizr.js" todir="${demos.dir}/js" overwrite="true"/>
    <!-- copy fat build file to tests/lib -->
    <copy file="${build.dir}/flora.js" todir="${tests.dir}/lib" overwrite="true"/>
    <!-- copy modernizr to tests/lib -->
    <copy file="${lib.dir}/modernizr.js" todir="${tests.dir}/lib" overwrite="true"/>
    <!-- copy css file to demos/css -->
    <copy file="${css.dir}/flora.css" todir="${demos.dir}/css" overwrite="true"/>
    <!-- copy examples folder to FloraJS.com /examples -->
    <copy todir="../FloraJS.com/examples" overwrite="true">
      <fileset dir="${examples.dir}"/>
    </copy>
    <!-- copy docs folder to FloraJS.com /docs -->
    <copy todir="../FloraJS.com/docs" overwrite="true">
      <fileset dir="${jsdoc.output}"/>
    </copy>
    <!-- copy demos folder to FloraJS.com /demos -->
    <copy todir="../FloraJS.com/demos" overwrite="true">
      <fileset dir="${demos.dir}"/>
    </copy>
    <!-- copy tests folder to FloraJS.com /tests -->
    <copy todir="../FloraJS.com/tests" overwrite="true">
      <fileset dir="${tests.dir}"/>
    </copy>
  </target>

</project>